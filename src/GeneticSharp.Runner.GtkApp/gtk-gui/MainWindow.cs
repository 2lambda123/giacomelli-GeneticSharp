
// This file has been generated by the GUI designer. Do not modify.

using System;
using Gdk;
using Gtk;
using Mono.Unix;
using Stetic;

public partial class MainWindow
{
    private HBox hbxMain;

    private DrawingArea drawingArea;

    private VBox vbxConfig;

    private VBox vbxSample;

    private Label label4;

    private ComboBox cmbSample;

    private VPaned problemConfigWidgetContainer;

    private VBox vbxGA;

    private VButtonBox vbbSample;

    private HSeparator hseparator1;

    private Label label1;

    private HBox hbox2;

    private Label label2;

    private SpinButton sbtPopulationMinSize;

    private HBox hbox3;

    private Label label3;

    private SpinButton sbtPopulationMaxSize;

    private HBox hbox11;

    private ComboBox cmbGenerationStrategy;

    private Button btnEditGenerationStrategy;

    private HSeparator hseparator2;

    private Label label5;

    private HBox hbox5;

    private ComboBox cmbSelection;

    private Button btnEditSelection;

    private HSeparator hseparator4;

    private Label label7;

    private HBox hbox9;

    private Label label10;

    private HScale hslCrossoverProbability;

    private HBox hbox6;

    private ComboBox cmbCrossover;

    private Button btnEditCrossover;

    private HSeparator hseparator5;

    private Label label8;

    private HBox hbox8;

    private Label label9;

    private HScale hslMutationProbability;

    private HBox hbox7;

    private ComboBox cmbMutation;

    private Button btnEditMutation;

    private HSeparator hseparator3;

    private Label label12;

    private HBox hbox12;

    private ComboBox cmbReinsertion;

    private Button btnEditReinsertion;

    private Label label11;

    private HBox hbox10;

    private ComboBox cmbTermination;

    private Button btnEditTermination;

    private HSeparator hseparatorMetaHeuristics;

    private Label labelMetaHeuristics;

    private HBox hboxMetaHeuristic;

    private ComboBox cmbMetaHeuristic;

    private Button btnEditMetaHeuristic;

    private HSeparator hseparator6;

    private HBox hboxRunStep;

    private Button btnStart;

    private Button btnStep;

    private Button btnNew;

    private Button btnStop;

    private Button btnResume;

    protected virtual void Build()
    {
        Gui.Initialize(this);
        // Widget MainWindow
        Name = "MainWindow";
        Title = Catalog.GetString("GeneticSharp :: Runner");
        Icon = new Pixbuf(System.IO.Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "./Icon.png"));
        WindowPosition = (WindowPosition)1;
        Modal = true;
        DefaultWidth = 800;
        DefaultHeight = 770;
        // Container child MainWindow.Gtk.Container+ContainerChild
        hbxMain = new HBox {Name = "hbxMain", Spacing = 10, BorderWidth = 10};
        // Container child hbxMain.Gtk.Box+BoxChild
        drawingArea = new DrawingArea {Name = "drawingArea"};
        hbxMain.Add(drawingArea);
        Box.BoxChild w1 = (Box.BoxChild)hbxMain[drawingArea];
        w1.Position = 0;
        w1.Padding = 1;
        // Container child hbxMain.Gtk.Box+BoxChild
        vbxConfig = new VBox {Name = "vbxConfig", Spacing = 6};
        // Container child vbxConfig.Gtk.Box+BoxChild
        vbxSample = new VBox {Name = "vbxSample", Spacing = 6};
        // Container child vbxSample.Gtk.Box+BoxChild
        label4 = new Label
        {
            Name = "label4", LabelProp = Catalog.GetString("Problem")
        };
        vbxSample.Add(label4);
        Box.BoxChild w2 = (Box.BoxChild)vbxSample[label4];
        w2.Position = 0;
        w2.Expand = false;
        w2.Fill = false;
        // Container child vbxSample.Gtk.Box+BoxChild
        cmbSample = ComboBox.NewText();
        cmbSample.Name = "cmbSample";
        vbxSample.Add(cmbSample);
        Box.BoxChild w3 = (Box.BoxChild)vbxSample[cmbSample];
        w3.Position = 1;
        w3.Expand = false;
        w3.Fill = false;
        // Container child vbxSample.Gtk.Box+BoxChild
        problemConfigWidgetContainer = new VPaned
        {
            CanFocus = true, Name = "problemConfigWidgetContainer", Position = 10
        };
        vbxSample.Add(problemConfigWidgetContainer);
        Box.BoxChild w4 = (Box.BoxChild)vbxSample[problemConfigWidgetContainer];
        w4.Position = 2;
        vbxConfig.Add(vbxSample);
        Box.BoxChild w5 = (Box.BoxChild)vbxConfig[vbxSample];
        w5.Position = 0;
        // Container child vbxConfig.Gtk.Box+BoxChild
        vbxGA = new VBox
        {
            WidthRequest = 250,
            Name = "vbxGA",
            Spacing = 6
        };
        // Container child vbxGA.Gtk.Box+BoxChild
        vbbSample = new VButtonBox {Name = "vbbSample"};
        vbxGA.Add(vbbSample);
        Box.BoxChild w6 = (Box.BoxChild)vbxGA[vbbSample];
        w6.Position = 0;
        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator1 = new HSeparator {Name = "hseparator1"};
        vbxGA.Add(hseparator1);
        Box.BoxChild w7 = (Box.BoxChild)vbxGA[hseparator1];
        w7.Position = 1;
        w7.Expand = false;
        w7.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label1 = new Label
        {
            Name = "label1", LabelProp = Catalog.GetString("Population size")
        };
        vbxGA.Add(label1);
        Box.BoxChild w8 = (Box.BoxChild)vbxGA[label1];
        w8.Position = 2;
        w8.Expand = false;
        w8.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox2 = new HBox {Name = "hbox2", Spacing = 6};
        // Container child hbox2.Gtk.Box+BoxChild
        label2 = new Label {Name = "label2", LabelProp = Catalog.GetString("Min")};
        hbox2.Add(label2);
        Box.BoxChild w9 = (Box.BoxChild)hbox2[label2];
        w9.Position = 0;
        w9.Expand = false;
        w9.Fill = false;
        // Container child hbox2.Gtk.Box+BoxChild
        sbtPopulationMinSize = new SpinButton(2, 10000, 1)
        {
            CanFocus = true,
            Name = "sbtPopulationMinSize",
            Adjustment = {PageIncrement = 10},
            ClimbRate = 1,
            Numeric = true,
            Value = 50
        };
        hbox2.Add(sbtPopulationMinSize);
        Box.BoxChild w10 = (Box.BoxChild)hbox2[sbtPopulationMinSize];
        w10.Position = 1;
        w10.Expand = false;
        w10.Fill = false;
        w10.Padding = 3;
        // Container child hbox2.Gtk.Box+BoxChild
        hbox3 = new HBox {Name = "hbox3", Spacing = 6};
        // Container child hbox3.Gtk.Box+BoxChild
        label3 = new Label {Name = "label3", LabelProp = Catalog.GetString("Max")};
        hbox3.Add(label3);
        Box.BoxChild w11 = (Box.BoxChild)hbox3[label3];
        w11.Position = 0;
        w11.Expand = false;
        w11.Fill = false;
        // Container child hbox3.Gtk.Box+BoxChild
        sbtPopulationMaxSize = new SpinButton(2, 10000, 1)
        {
            CanFocus = true,
            Name = "sbtPopulationMaxSize",
            Adjustment = {PageIncrement = 10},
            ClimbRate = 1,
            Numeric = true,
            Value = 70
        };
        hbox3.Add(sbtPopulationMaxSize);
        Box.BoxChild w12 = (Box.BoxChild)hbox3[sbtPopulationMaxSize];
        w12.Position = 1;
        w12.Expand = false;
        w12.Fill = false;
        hbox2.Add(hbox3);
        Box.BoxChild w13 = (Box.BoxChild)hbox2[hbox3];
        w13.PackType = (PackType)1;
        w13.Position = 2;
        w13.Expand = false;
        w13.Fill = false;
        vbxGA.Add(hbox2);
        Box.BoxChild w14 = (Box.BoxChild)vbxGA[hbox2];
        w14.Position = 3;
        w14.Expand = false;
        w14.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox11 = new HBox {Name = "hbox11", Spacing = 6};
        // Container child hbox11.Gtk.Box+BoxChild
        cmbGenerationStrategy = ComboBox.NewText();
        cmbGenerationStrategy.WidthRequest = 200;
        cmbGenerationStrategy.Name = "cmbGenerationStrategy";
        hbox11.Add(cmbGenerationStrategy);
        Box.BoxChild w15 = (Box.BoxChild)hbox11[cmbGenerationStrategy];
        w15.Position = 0;
        w15.Expand = false;
        w15.Fill = false;
        // Container child hbox11.Gtk.Box+BoxChild
        btnEditGenerationStrategy = new Button
        {
            CanFocus = true,
            Name = "btnEditGenerationStrategy",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox11.Add(btnEditGenerationStrategy);
        Box.BoxChild w16 = (Box.BoxChild)hbox11[btnEditGenerationStrategy];
        w16.Position = 1;
        w16.Expand = false;
        w16.Fill = false;
        vbxGA.Add(hbox11);
        Box.BoxChild w17 = (Box.BoxChild)vbxGA[hbox11];
        w17.Position = 4;
        w17.Expand = false;
        w17.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator2 = new HSeparator {Name = "hseparator2"};
        vbxGA.Add(hseparator2);
        Box.BoxChild w18 = (Box.BoxChild)vbxGA[hseparator2];
        w18.Position = 5;
        w18.Expand = false;
        w18.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label5 = new Label
        {
            Name = "label5", LabelProp = Catalog.GetString("Selection")
        };
        vbxGA.Add(label5);
        Box.BoxChild w19 = (Box.BoxChild)vbxGA[label5];
        w19.Position = 6;
        w19.Expand = false;
        w19.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox5 = new HBox {Name = "hbox5", Spacing = 6};
        // Container child hbox5.Gtk.Box+BoxChild
        cmbSelection = ComboBox.NewText();
        cmbSelection.WidthRequest = 200;
        cmbSelection.Name = "cmbSelection";
        hbox5.Add(cmbSelection);
        Box.BoxChild w20 = (Box.BoxChild)hbox5[cmbSelection];
        w20.Position = 0;
        w20.Expand = false;
        w20.Fill = false;
        // Container child hbox5.Gtk.Box+BoxChild
        btnEditSelection = new Button
        {
            CanFocus = true,
            Name = "btnEditSelection",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox5.Add(btnEditSelection);
        Box.BoxChild w21 = (Box.BoxChild)hbox5[btnEditSelection];
        w21.Position = 1;
        w21.Expand = false;
        w21.Fill = false;
        vbxGA.Add(hbox5);
        Box.BoxChild w22 = (Box.BoxChild)vbxGA[hbox5];
        w22.Position = 7;
        w22.Expand = false;
        w22.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator4 = new HSeparator {Name = "hseparator4"};
        vbxGA.Add(hseparator4);
        Box.BoxChild w23 = (Box.BoxChild)vbxGA[hseparator4];
        w23.Position = 8;
        w23.Expand = false;
        w23.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label7 = new Label
        {
            Name = "label7", LabelProp = Catalog.GetString("Crossover")
        };
        vbxGA.Add(label7);
        Box.BoxChild w24 = (Box.BoxChild)vbxGA[label7];
        w24.Position = 9;
        w24.Expand = false;
        w24.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox9 = new HBox {Name = "hbox9", Spacing = 6};
        // Container child hbox9.Gtk.Box+BoxChild
        label10 = new Label
        {
            Name = "label10", LabelProp = Catalog.GetString("Probability")
        };
        hbox9.Add(label10);
        Box.BoxChild w25 = (Box.BoxChild)hbox9[label10];
        w25.Position = 0;
        w25.Expand = false;
        w25.Fill = false;
        // Container child hbox9.Gtk.Box+BoxChild
        hslCrossoverProbability = new HScale(null)
        {
            CanFocus = true,
            Name = "hslCrossoverProbability",
            Adjustment =
            {
                Upper = 1.1,
                PageIncrement = 0.1,
                PageSize = 0.1,
                StepIncrement = 0.01,
                Value = 0.01
            },
            DrawValue = true,
            Digits = 2,
            ValuePos = (PositionType) 2
        };
        hbox9.Add(hslCrossoverProbability);
        Box.BoxChild w26 = (Box.BoxChild)hbox9[hslCrossoverProbability];
        w26.Position = 1;
        vbxGA.Add(hbox9);
        Box.BoxChild w27 = (Box.BoxChild)vbxGA[hbox9];
        w27.Position = 10;
        w27.Expand = false;
        w27.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox6 = new HBox {Name = "hbox6", Spacing = 6};
        // Container child hbox6.Gtk.Box+BoxChild
        cmbCrossover = ComboBox.NewText();
        cmbCrossover.WidthRequest = 200;
        cmbCrossover.Name = "cmbCrossover";
        hbox6.Add(cmbCrossover);
        Box.BoxChild w28 = (Box.BoxChild)hbox6[cmbCrossover];
        w28.Position = 0;
        w28.Expand = false;
        w28.Fill = false;
        // Container child hbox6.Gtk.Box+BoxChild
        btnEditCrossover = new Button
        {
            CanFocus = true,
            Name = "btnEditCrossover",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox6.Add(btnEditCrossover);
        Box.BoxChild w29 = (Box.BoxChild)hbox6[btnEditCrossover];
        w29.Position = 1;
        w29.Expand = false;
        w29.Fill = false;
        vbxGA.Add(hbox6);
        Box.BoxChild w30 = (Box.BoxChild)vbxGA[hbox6];
        w30.Position = 11;
        w30.Expand = false;
        w30.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator5 = new HSeparator {Name = "hseparator5"};
        vbxGA.Add(hseparator5);
        Box.BoxChild w31 = (Box.BoxChild)vbxGA[hseparator5];
        w31.Position = 12;
        w31.Expand = false;
        w31.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label8 = new Label
        {
            Name = "label8", LabelProp = Catalog.GetString("Mutation")
        };
        vbxGA.Add(label8);
        Box.BoxChild w32 = (Box.BoxChild)vbxGA[label8];
        w32.Position = 13;
        w32.Expand = false;
        w32.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox8 = new HBox {Name = "hbox8", Spacing = 6};
        // Container child hbox8.Gtk.Box+BoxChild
        label9 = new Label
        {
            Name = "label9", LabelProp = Catalog.GetString("Probability")
        };
        hbox8.Add(label9);
        Box.BoxChild w33 = (Box.BoxChild)hbox8[label9];
        w33.Position = 0;
        w33.Expand = false;
        w33.Fill = false;
        // Container child hbox8.Gtk.Box+BoxChild
        hslMutationProbability = new HScale(null)
        {
            CanFocus = true,
            Name = "hslMutationProbability",
            Adjustment = {Upper = 1.1, PageIncrement = 0.1, PageSize = 0.1, StepIncrement = 0.01},
            DrawValue = true,
            Digits = 2,
            ValuePos = (PositionType) 2
        };
        hbox8.Add(hslMutationProbability);
        Box.BoxChild w34 = (Box.BoxChild)hbox8[hslMutationProbability];
        w34.Position = 1;
        vbxGA.Add(hbox8);
        Box.BoxChild w35 = (Box.BoxChild)vbxGA[hbox8];
        w35.Position = 14;
        w35.Expand = false;
        w35.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox7 = new HBox {Name = "hbox7", Spacing = 6};
        // Container child hbox7.Gtk.Box+BoxChild
        cmbMutation = ComboBox.NewText();
        cmbMutation.WidthRequest = 200;
        cmbMutation.Name = "cmbMutation";
        hbox7.Add(cmbMutation);
        Box.BoxChild w36 = (Box.BoxChild)hbox7[cmbMutation];
        w36.Position = 0;
        w36.Expand = false;
        w36.Fill = false;
        // Container child hbox7.Gtk.Box+BoxChild
        btnEditMutation = new Button
        {
            CanFocus = true,
            Name = "btnEditMutation",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox7.Add(btnEditMutation);
        Box.BoxChild w37 = (Box.BoxChild)hbox7[btnEditMutation];
        w37.Position = 1;
        w37.Expand = false;
        w37.Fill = false;
        vbxGA.Add(hbox7);
        Box.BoxChild w38 = (Box.BoxChild)vbxGA[hbox7];
        w38.Position = 15;
        w38.Expand = false;
        w38.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator3 = new HSeparator {Name = "hseparator3"};
        vbxGA.Add(hseparator3);
        Box.BoxChild w39 = (Box.BoxChild)vbxGA[hseparator3];
        w39.Position = 16;
        w39.Expand = false;
        w39.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label12 = new Label
        {
            Name = "label12", LabelProp = Catalog.GetString("Reinsertion")
        };
        vbxGA.Add(label12);
        Box.BoxChild w40 = (Box.BoxChild)vbxGA[label12];
        w40.Position = 17;
        w40.Expand = false;
        w40.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox12 = new HBox {Name = "hbox12", Spacing = 6};
        // Container child hbox12.Gtk.Box+BoxChild
        cmbReinsertion = ComboBox.NewText();
        cmbReinsertion.WidthRequest = 200;
        cmbReinsertion.Name = "cmbTermination1";
        hbox12.Add(cmbReinsertion);
        Box.BoxChild w41 = (Box.BoxChild)hbox12[cmbReinsertion];
        w41.Position = 0;
        w41.Expand = false;
        w41.Fill = false;
        // Container child hbox12.Gtk.Box+BoxChild
        btnEditReinsertion = new Button
        {
            CanFocus = true,
            Name = "btnEditReinsertion",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox12.Add(btnEditReinsertion);
        Box.BoxChild w42 = (Box.BoxChild)hbox12[btnEditReinsertion];
        w42.Position = 1;
        w42.Expand = false;
        w42.Fill = false;
        vbxGA.Add(hbox12);
        Box.BoxChild w43 = (Box.BoxChild)vbxGA[hbox12];
        w43.Position = 18;
        w43.Expand = false;
        w43.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        label11 = new Label
        {
            Name = "label11", LabelProp = Catalog.GetString("Termination")
        };
        vbxGA.Add(label11);
        Box.BoxChild w44 = (Box.BoxChild)vbxGA[label11];
        w44.Position = 19;
        w44.Expand = false;
        w44.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        hbox10 = new HBox {Name = "hbox10", Spacing = 6};
        // Container child hbox10.Gtk.Box+BoxChild
        cmbTermination = ComboBox.NewText();
        cmbTermination.WidthRequest = 200;
        cmbTermination.Name = "cmbTermination";
        hbox10.Add(cmbTermination);
        Box.BoxChild w45 = (Box.BoxChild)hbox10[cmbTermination];
        w45.Position = 0;
        w45.Expand = false;
        w45.Fill = false;
        // Container child hbox10.Gtk.Box+BoxChild
        btnEditTermination = new Button
        {
            CanFocus = true,
            Name = "btnEditTermination",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hbox10.Add(btnEditTermination);
        Box.BoxChild w46 = (Box.BoxChild)hbox10[btnEditTermination];
        w46.Position = 1;
        w46.Expand = false;
        w46.Fill = false;
        vbxGA.Add(hbox10);
        Box.BoxChild w47 = (Box.BoxChild)vbxGA[hbox10];
        w47.Position = 20;
        w47.Expand = false;
        w47.Fill = false;


        // Container child vbxGA.Gtk.Box+BoxChild
        hseparatorMetaHeuristics = new HSeparator { Name = "hseparatorMetaHeuristics" };
        vbxGA.Add(hseparatorMetaHeuristics);
        Box.BoxChild wHseparatorMetaHeuristics = (Box.BoxChild)vbxGA[hseparatorMetaHeuristics];
        //wHseparatorMetaHeuristics.Position = 16;
        wHseparatorMetaHeuristics.Expand = false;
        wHseparatorMetaHeuristics.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild
        labelMetaHeuristics = new Label
        {
            Name = "labelMetaHeuristics",
            LabelProp = Catalog.GetString("Metaheuristic")
        };
        vbxGA.Add(labelMetaHeuristics);
        Box.BoxChild wlabelMetaHeuristics = (Box.BoxChild)vbxGA[labelMetaHeuristics];
        //wlabelMetaHeuristics.Position = 17;
        wlabelMetaHeuristics.Expand = false;
        wlabelMetaHeuristics.Fill = false;
        // Container child vbxGA.Gtk.Box+BoxChild

        // Container child hbox12.Gtk.Box+BoxChild
        hboxMetaHeuristic = new HBox { Name = "hboxMetaHeuristic", Spacing = 6 };
        vbxGA.Add(hboxMetaHeuristic);
        Box.BoxChild whboxMetaHeuristic = (Box.BoxChild)vbxGA[hboxMetaHeuristic];
        whboxMetaHeuristic.Expand = false;
        whboxMetaHeuristic.Fill = false;
        cmbMetaHeuristic = ComboBox.NewText();
        cmbMetaHeuristic.WidthRequest = 200;
        cmbMetaHeuristic.Name = "cmbMetaHeuristic";
        hboxMetaHeuristic.Add(cmbMetaHeuristic);
        Box.BoxChild wcmbMetaHeuristic = (Box.BoxChild)hboxMetaHeuristic[cmbMetaHeuristic];
        //wcmbMetaHeuristic.Position = 0;
        wcmbMetaHeuristic.Expand = false;
        wcmbMetaHeuristic.Fill = false;
        btnEditMetaHeuristic = new Button
        {
            CanFocus = true,
            Name = "btnEditMetaHeuristic",
            UseUnderline = true,
            Label = Catalog.GetString("Edit")
        };
        hboxMetaHeuristic.Add(btnEditTermination);

        // Container child vbxGA.Gtk.Box+BoxChild
        hseparator6 = new HSeparator {Name = "hseparator6"};
        vbxGA.Add(hseparator6);
        Box.BoxChild w48 = (Box.BoxChild)vbxGA[hseparator6];
        w48.Position = 21;
        w48.Expand = false;
        w48.Fill = false;
        vbxConfig.Add(vbxGA);
        Box.BoxChild w49 = (Box.BoxChild)vbxConfig[vbxGA];
        w49.Position = 1;

        // Container child vbxConfig.Gtk.Box+BoxChild
        btnNew = new Button
        {
            CanFocus = true,
            Name = "btnNew",
            UseUnderline = true,
            Label = Catalog.GetString("_New")
        };
        vbxConfig.Add(btnNew);
        Box.BoxChild w51 = (Box.BoxChild)vbxConfig[btnNew];
        w51.Position = 2;
        w51.Expand = false;
        w51.Fill = false;

        // Container child vbxConfig.Gtk.Box+BoxChild
        hboxRunStep = new HBox
        {
            Name = "hboxRunStep", 
            Spacing = 0,
            HeightRequest = 30
        };
        vbxConfig.Add(hboxRunStep);
        Box.BoxChild wRunStep = (Box.BoxChild)vbxConfig[hboxRunStep];
        wRunStep.Position = 3;
        wRunStep.Expand = false;
        wRunStep.Fill = false;
        btnStart = new Button
        {
            CanFocus = true,
            Name = "btnStart",
            UseUnderline = true,
            Label = Catalog.GetString("_Start"),

        };
        hboxRunStep.Add(btnStart);
        Box.BoxChild w50 = (Box.BoxChild)hboxRunStep[btnStart];
        w50.Position = 0;
        w50.Expand = true;
        w50.Fill = true;
        //w50.Padding = 0;
        // Container child vbxConfig.Gtk.Box+BoxChild
        btnResume = new Button
        {
            CanFocus = true,
            Name = "btnResume",
            UseUnderline = true,
            Label = Catalog.GetString("_Resume"),

        };
        hboxRunStep.Add(btnResume);
        Box.BoxChild w53 = (Box.BoxChild)hboxRunStep[btnResume];
        w53.Position = 1;
        w53.Expand = true;
        w53.Fill = true;
        //w53.Padding = 0;

        // Container child vbxConfig.Gtk.Box+BoxChild
        btnStep = new Button
        {
            CanFocus = true,
            Name = "btnStep",
            UseUnderline = true,
            Label = Catalog.GetString("_Step"),
        };
        hboxRunStep.Add(btnStep);
        Box.BoxChild wStep = (Box.BoxChild)hboxRunStep[btnStep];
        wStep.Position = 2;
        wStep.Expand = true;
        wStep.Fill = true;
        //wStep.Padding = 0;
       
        // Container child vbxConfig.Gtk.Box+BoxChild
        btnStop = new Button
        {
            CanFocus = true,
            Name = "btnStop",
            UseUnderline = true,
            Label = Catalog.GetString("_Stop")
        };
        vbxConfig.Add(btnStop);
        Box.BoxChild w52 = (Box.BoxChild)vbxConfig[btnStop];
        w52.Position = 4;
        w52.Expand = false;
        w52.Fill = false;
       
        //Config pane
        hbxMain.Add(vbxConfig);
        Box.BoxChild w54 = (Box.BoxChild)hbxMain[vbxConfig];
        w54.Position = 1;
        w54.Expand = false;
        w54.Fill = false;
        Add(hbxMain);
        if (Child != null)
        {
            Child.ShowAll();
        }
        btnResume.Hide();
        Show();
        DeleteEvent += OnDeleteEvent;
    }
}
